{"version":3,"sources":["components/MovieList.tsx","components/MovieListRender.tsx","components/MovieListHeading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MovieList","content","Title","imdbID","Year","Type","Poster","alt","src","className","MovieListRender","error","movies","length","map","movie","MovieListHeading","heading","App","useState","setMovies","err","setErr","searchValue","setSearchValue","getMoviesRequest","a","url","fetch","response","json","resJSON","Search","message","useEffect","type","value","onChange","e","text","currentTarget","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA0BeA,EAnBG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QAETC,EAAsCD,EAAtCC,MAAOC,EAA+BF,EAA/BE,OAAQC,EAAuBH,EAAvBG,KAAMC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEnC,OAEI,gCACI,qBAAKC,IAAG,UAAKL,EAAL,SAAmBM,IAAKF,IAChC,sBAAKG,UAAU,WAAf,UACI,6BAAKP,IACL,sBAAKO,UAAU,mDAAf,UACI,8BAAIN,EAAJ,MAAeC,KACf,4BAAIC,cCQTK,EAlBS,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,OAE9B,OAAID,EAAc,0DAEd,OAACC,QAAD,IAACA,OAAD,EAACA,EAAQC,QAGT,mCACKD,EAAOE,KAAI,SAACC,GAAD,OACR,qBAAKN,UAAU,mDAAf,SACI,cAAC,EAAD,CAAWR,QAASc,KAD+CA,EAAMZ,aAL7D,sDCCjBa,EARU,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,QACvB,OACI,qBAAKR,UAAU,MAAf,SACI,6BAAKQ,OCwDFC,EA1DH,WAAqB,IAAD,EAEFC,mBAAmB,IAFjB,mBAEvBP,EAFuB,KAEfQ,EAFe,OAGRD,mBAAiB,IAHT,mBAGvBE,EAHuB,KAGlBC,EAHkB,OAIQH,mBAAiB,IAJzB,mBAIvBI,EAJuB,KAIVC,EAJU,KAcxBC,EAAgB,uCAAG,WAAOF,GAAP,mBAAAG,EAAA,6DAEjBC,EAFiB,oCAEkBJ,EAFlB,sCAMEK,MAAMD,GANR,cAMfE,EANe,gBAQCA,EAASC,OARV,QAQfC,EARe,QAUTC,QACVZ,EAAUW,EAAQC,QAXC,kDAcrBV,EAAO,KAAEW,SAdY,0DAAH,sDAuBtB,OAJAC,qBAAU,WACRT,EAAiBF,KAChB,CAACA,IAGF,sBAAKd,UAAU,4BAAf,UACE,sBAAKA,UAAU,0CAAf,UACE,cAAC,EAAD,CAAkBQ,QAAQ,WAC1B,qBAAKR,UAAU,eAAf,SACE,uBACE0B,KAAK,OACL1B,UAAU,eACV2B,MAAOb,EACPc,SAtCW,SAACC,GACpB,IAAMC,EAAOD,EAAEE,cAAcJ,MAC7BZ,EAAee,IAqCPE,YAAY,2BAIlB,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,CAAiBE,MAAOU,EAAKT,OAAQA,UC7C9B8B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.485f5249.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport { Movies } from '../types/index';\n\ninterface Props {\n    content: Movies\n}\n\nconst MovieList = ({ content }: Props): ReactElement => {\n\n    const { Title, imdbID, Year, Type, Poster } = content\n\n    return (\n\n        <div>\n            <img alt={`${Title} logo`} src={Poster} />\n            <div className=\"overlay \">\n                <h3>{Title}</h3>\n                <div className=\"d-flex align-items-center justify-content-center\">\n                    <p>{imdbID} | {Year}</p>\n                    <p>{Type}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieList\n","import React, { ReactElement } from 'react'\nimport { Movies } from '../types';\nimport MovieList from './MovieList';\n\ninterface Props {\n    error?: string\n    movies: Movies[]\n}\n\nconst MovieListRender = ({ error, movies }: Props): ReactElement => {\n\n    if (error) return <p> Unable to fetch movies.</p>\n\n    if (!movies?.length) return <p>No movies available.</p>\n\n    return (\n        <>\n            {movies.map((movie) => (\n                <div className=\"image-container d-flex justify-content-start m-3\" key={movie.imdbID}>\n                    <MovieList content={movie} />\n                </div>\n            ))\n            }\n        </>\n    )\n}\n\nexport default MovieListRender\n","import React, {ReactElement} from 'react'\n\ninterface Props {\n    heading: string\n}\n\nconst MovieListHeading = ({heading}:Props): ReactElement => {\n    return (\n        <div className=\"col\">\n            <h1>{heading}</h1>\n        </div>\n    )\n}\n\nexport default MovieListHeading\n","import React, { ReactElement, useState, useEffect } from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './App.css'\nimport MovieListRender from './components/MovieListRender';\nimport { Movies } from './types/index';\nimport MovieListHeading from './components/MovieListHeading';\n\nconst App = (): ReactElement => {\n\n  const [movies, setMovies] = useState<Movies[]>([])\n  const [err, setErr] = useState<string>('')\n  const [searchValue, setSearchValue] = useState<string>('')\n\n  // Handle change\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const text = e.currentTarget.value;\n    setSearchValue(text)\n  }\n\n  // GET MOVIES\n  const getMoviesRequest = async (searchValue: string) => {\n\n    const url = `http://www.omdbapi.com/?s=${searchValue}&apikey=beb032aa`\n\n    try {\n\n      const response = await fetch(url)\n\n      const resJSON = await response.json();\n\n      if (resJSON.Search) {\n        setMovies(resJSON.Search)\n      }\n    } catch (e) {\n      setErr(e.message)\n    }\n\n  }\n\n  useEffect(() => {\n    getMoviesRequest(searchValue)\n  }, [searchValue])\n\n  return (\n    <div className='container-fluid movie-app'>\n      <div className=\"row d-flex align-items-center mt-4 mb-4\">\n        <MovieListHeading heading=\"Movies\" />\n        <div className=\"col col-sm-4\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            value={searchValue}\n            onChange={handleChange}\n            placeholder=\"Type to search...\"\n          />\n        </div>\n      </div>\n      <div className='row'>\n        <MovieListRender error={err} movies={movies} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}